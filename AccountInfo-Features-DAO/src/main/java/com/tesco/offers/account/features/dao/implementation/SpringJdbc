
	/*private HibernateTemplate hibernateTemplatefeature=null;
	public FeaturesDaoImplementation ()
	{
		System.out.println("feature Dao Implementation Constructor");
		ApplicationContext factory1=new ClassPathXmlApplicationContext("applicationContexts.xml");
		
		DriverManagerDataSource ff =(DriverManagerDataSource)factory1.getBean("dataSource");
		System.out.println(ff);
		
		 Object ll = factory1.getBean("sessionFactory");
		System.out.println(ll);
		
		hibernateTemplatefeature=(HibernateTemplate) factory1.getBean("hibernateTemplatefeature");
		System.out.println(hibernateTemplatefeature);
		             
	
	}
	
	public FeaturesDaoResponse getAccountFeatures(FeaturesDaoRequest request)
			throws FeatureBusinessException, FeatureServiceException  {
		
		System.out.println("entered into method of feature implementation");
		System.out.println("request coming from service:::::::"+request);
		System.out.println("request coming from service cluent:::::::"+request.getClientid());
		FeaturesDaoResponse response=new FeaturesDaoResponse();
		String hh=request.getClientid();
		System.out.println("Client id::::::::::::::"+hh);
		
		
		//getting details of  client details
		
				DetachedCriteria detachedCriteria=DetachedCriteria.forClass(Client_Details.class);
				detachedCriteria.add(Restrictions.eq("client", request.getClientid()));
				 List<Client_Details> listClientDetails = (List<Client_Details>) hibernateTemplatefeature.findByCriteria(detachedCriteria);
				 System.out.println("list of client details in feature:::::::::"+listClientDetails.size());
				System.out.println(detachedCriteria);
				
				if(listClientDetails.size()<1 || listClientDetails==null)
				{
					response.setStatusCode("100");
					response.setStatusMsg("InvalidClient");	
					
				}
				
				
				//getting details of channel id
				
				DetachedCriteria detachedCriteriaChannel=DetachedCriteria.forClass(Channel_Details.class);
				detachedCriteriaChannel.add(Restrictions.eq("channel", request.getChannelid()));
				 List<Channel_Details> listChannelDetails = (List<Channel_Details>) hibernateTemplatefeature.findByCriteria(detachedCriteriaChannel);
				 System.out.println("list of detachedCriteriaChannel  details in feature:::::::::"+listClientDetails.size());
				System.out.println(detachedCriteriaChannel);
				
				if(listChannelDetails.size()<1 || listChannelDetails==null)
				{
					response.setStatusCode("101");
					response.setStatusMsg("Invalid ChannelId");	
				}
				
				
				
				//getting details of customer 
				
				DetachedCriteria detachedCriteriaCustomer=DetachedCriteria.forClass(Customer_Details.class);
				detachedCriteriaCustomer.add(Restrictions.eq("cardNumber", request.getAccountnumber()));
				 List<Customer_Details> listCustomerDetails = (List<Customer_Details>) hibernateTemplatefeature.findByCriteria(detachedCriteriaCustomer);
				 System.out.println("list of detachedCriteriaCustomer  details in feature:::::::::"+listCustomerDetails.size());
				System.out.println(detachedCriteriaCustomer);
				
				if(listCustomerDetails.size()<1 || listCustomerDetails==null)
				{
					response.setStatusCode("102");
					response.setStatusMsg("Invalid Customer");	
				}
				
				//getting details of balance information
				
				String hql="From  Features_info bal where bal.cardNumber=:card_num";
				DetachedCriteria detachedCriteriabalance=DetachedCriteria.forClass(Features_info.class);
				
				List<Features_info> listCustomerfeature = (List<Features_info>) hibernateTemplatefeature.findByNamedParam(hql, new String[]{"card_num"}, new Object[]{request.getAccountnumber()});
				System.out.println("size of features:::::::"+listCustomerfeature.size());
				  List<AccountFeaturesDao> accountfeatures=new ArrayList<AccountFeaturesDao>();
					 
				
				   for (Features_info features_info : listCustomerfeature) {
				    	System.out.println("coming to for loop");
						System.out.println(features_info.getCardNumber());
						System.out.println(features_info.getCode());
						System.out.println(features_info.getDesc());
						System.out.println(features_info.getExpiryDate());
						
						    AccountFeaturesDao accountFeaturesDao=new AccountFeaturesDao();
						   
						accountFeaturesDao.setCode(features_info.getCode());
						accountFeaturesDao.setDesc(features_info.getDesc());
						accountFeaturesDao.setEligibility(features_info.isEligible());
						accountFeaturesDao.setExpiryDate(features_info.getExpiryDate());
						accountfeatures.add(accountFeaturesDao);
						System.out.println("list size in feature implementation:::::::::::::"+accountfeatures.size());
						
						}
				   response.setAccountfeatures(accountfeatures);
					
				    
				    if(listCustomerfeature==null)
					{
					response.setStatusCode("103");
			     	response.setStatusMsg("Invalid Features");
					
					}
				
					response.setStatusCode("0");
					response.setStatusMsg("success");
		
		
		
		
		
		
		
		
		
		
		
				return response;
	}

	public static void main(String[] args) throws FeatureBusinessException, FeatureServiceException{
		// TODO Auto-generated method stub
    System.out.println("Main Method");
	System.out.println("Request Completed");

	FeaturesDaoRequest request =new FeaturesDaoRequest();
	//System.out.println("Request Completed");

	request.setClientid("web");
	request.setChannelid("online");
	request.setAccountnumber("1111222233334444");
	
	//System.out.println("Request Completed");
	 FeaturesDaoImplementation hibernateChecking=new  FeaturesDaoImplementation();
	FeaturesDaoResponse FeaturesDaoResponse=hibernateChecking.getAccountFeatures(request);
	System.out.println(FeaturesDaoResponse);
	
	}*/
	
