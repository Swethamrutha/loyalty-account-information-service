/*
		SessionFactory sessionFactory = HibernateUtils.getSessionFactory();
		System.out.println("SessionFactory::::::::"+sessionFactory);
		
		Session session=sessionFactory.openSession();
		
		//getting list of client
		Criteria criteria=session.createCriteria(Client_Details.class);
		criteria.add(Restrictions.eq("client", request.getClientid()));
	    List<Client_Details> clientList = criteria.list();
	    System.out.println("list in client::"+clientList);
		
	    for (Client_Details client_Details : clientList) {
			System.out.println(client_Details.getClient());
		}
	    
	    
	    if(clientList==null)
		{
		response.setStatusCode("100");
		response.setStatusMsg("InvalidClient");
		
		}
		
	   //getting list of channel
	    Criteria criteria1=session.createCriteria(Channel_Details.class);
		criteria1.add(Restrictions.eq("channel", request.getChannelid()));
	    List<Channel_Details> channelList = criteria1.list();
		
	    
	    for (Channel_Details channel_Details : channelList) {
			System.out.println(channel_Details.getChannel());
		}
	    if(channelList==null)
		{
		response.setStatusCode("101");
		response.setStatusMsg("Invalid ChannelId");
		throw new LinkedCardBusinessException(response.getStatusCode(),response.getStatusMsg());
		}
	    
	    //getting list of customer
	    
	    Criteria criteria2=session.createCriteria(Customer_Details.class);
		criteria2.add(Restrictions.eq("cardNumber", request.getAccountnumber()));
	    List<Customer_Details> customerList = criteria2.list();
		
	    
	    for (Customer_Details customer_Details : customerList) {
			System.out.println(customer_Details.getCardNumber());
		}
	    if(customerList==null)
		{
	    	
		response.setStatusCode("102");
     	response.setStatusMsg("Invalid CardNumber");
		
		}
	    
	    //getting list of cards
	    
	    
	    
	    Criteria cardsCriteria=session.createCriteria(LinkedCards_Info.class);
	    cardsCriteria.add(Restrictions.eq("cardNumber", request.getAccountnumber()));
	    List<LinkedCards_Info> cardsList = cardsCriteria.list();
	    System.out.println(cardsList);
		
	    for (LinkedCards_Info linkedCards_Info : cardsList) {
	    	System.out.println(linkedCards_Info.getLinkedCards());
	    	String cardNum=linkedCards_Info.getLinkedCards();
	    	String[] cardNumSplit=cardNum.split(",");
	    	
	    	List<String> cardsAddList=new ArrayList<String>();
	    	
	    	for (String getCards : cardNumSplit) {
				
	    		System.out.println(getCards);
	    		cardsAddList.add(getCards);
			}
	    	
	    	response.setLinkedCards(cardsAddList);
		}
	    
	    
	    if(cardsList==null)
		{
		response.setStatusCode("102");
     	response.setStatusMsg("Invalid CardNumber");
		
		}
    
		response.setStatusCode("0");
		response.setStatusMsg("success");*/
		
	return response;
	}

	public static void main(String[] args) throws LinkedCardBusinessException, LinkedCardSystemException{
		// TODO Auto-generated method stub
    System.out.println("Main Method");
	System.out.println("Request Completed");

	CardsDAORequest request =new CardsDAORequest();
	//System.out.println("Request Completed");

	request.setClientid("web");
	request.setChannelid("online");
	request.setAccountnumber("1111222233334444");
	
	//System.out.println("Request Completed");
	CardsDAOImplementation hibernateChecking=new CardsDAOImplementation();
	CardsDAOResponse CardsDAOResponse=hibernateChecking.getAllCards(request);
	System.out.println(CardsDAOResponse);
	
	
		}


	
	
	
	
	
	
	
	
	
	
	
	String hql="From LinkedCards_Info bal where bal.cardNumber=:card_num";
				DetachedCriteria detachedCriteriabalance=DetachedCriteria.forClass(LinkedCards_Info.class);
				
				List<LinkedCards_Info> cardsList = (List<LinkedCards_Info>) hibernateTemplatecard.findByNamedParam(hql, new String[]{"card_num"}, new Object[]{request.getAccountnumber()});
				
				for (LinkedCards_Info linkedCards_Info : cardsList) {
				    	System.out.println(linkedCards_Info.getLinkedCards());
				    	String cardNum=linkedCards_Info.getLinkedCards();
				    	String[] cardNumSplit=cardNum.split(",");
				    	
				    	List<String> cardsAddList=new ArrayList<String>();
				    	
				    	for (String getCards : cardNumSplit) {
							
				    		System.out.println(getCards);
				    		cardsAddList.add(getCards);
						}
				    	
				    	
				    	
		/*
				DetachedCriteria detachedCriteriaCustomer=DetachedCriteria.forClass(Customer_Details.class);
				detachedCriteriaCustomer.add(Restrictions.eq("cardNumber", request.getAccountnumber()));
				 List<Customer_Details> listCustomerDetails = (List<Customer_Details>) hibernateTemplatecard.findByCriteria(detachedCriteriaCustomer);
				 System.out.println("list of detachedCriteriaCustomer  details in feature:::::::::"+listCustomerDetails.size());
				System.out.println(detachedCriteriaCustomer);*/
						    	
	
	
	
